# AUTOGENERATED! DO NOT EDIT! File to edit: 00_data.ipynb (unless otherwise specified).

__all__ = ['create_tff_client_data_from_df']

# Cell
import nest_asyncio

nest_asyncio.apply()
import numpy as np
import pandas as pd
import tensorflow as tf
import tensorflow_federated as tff

# Cell
def create_tff_client_data_from_df(
    df,
    client_id_col="client_id",
    sample_size=1.0,
    shuffle_buffer=1000,
    num_batch=1,
    num_epochs=1,
):
    """
    turn pd dataframe into tff client datasets (train and test datasets)
    """

    def create_tf_dataset_for_client_fn(client_id):
        """a function which takes a client_id and returns a tf.data.Dataset for that client"""
        client_data = df[df.client_id == client_id]
        dataset = tf.data.Dataset.from_tensor_slices(client_data.to_dict("list"))
        dataset = dataset.shuffle(shuffle_buffer).batch(num_batch).repeat(num_epochs)
        return dataset

    # split client id into train and test clients
    client_ids = np.random.choice(
        df[client_id_col].unique(),
        size=int(sample_size * df[client_id_col].nunique()),
    ).tolist()  # proportion of clients to use

    # train data
    client_data = tff.simulation.datasets.ClientData.from_clients_and_fn(
        client_ids=client_ids,
        create_tf_dataset_for_client_fn=create_tf_dataset_for_client_fn,
    )

    return client_data